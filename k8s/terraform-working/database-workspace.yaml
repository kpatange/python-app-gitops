apiVersion: terraform.crossplane.io/v1beta1
kind: Workspace
metadata:
  name: database-terraform-workspace
spec:
  providerConfigRef:
    name: terraform-working-config
  
  module: |
    # Database configuration simulation
    variable "database_name" {
      description = "Name of the database"
      type = string
      default = "myapp"
    }
    
    variable "environment" {
      description = "Environment name"
      type = string
      default = "development"
    }
    
    locals {
      common_tags = {
        Environment = var.environment
        ManagedBy = "terraform"
        Project = "demo-app"
      }
      
      database_config = {
        name = "${var.database_name}_${var.environment}"
        backup_retention = var.environment == "production" ? 30 : 7
        multi_az = var.environment == "production" ? true : false
      }
    }
    
    # Generate database credentials
    resource "random_string" "db_username" {
      length = 12
      special = false
      upper = false
      numeric = false
    }
    
    resource "random_password" "db_password" {
      length = 24
      special = true
    }
    
    resource "random_string" "db_suffix" {
      length = 6
      special = false
      upper = false
    }
    
    # Create database configuration file
    resource "local_file" "database_config" {
      content = jsonencode({
        database = {
          name = "${local.database_config.name}_${random_string.db_suffix.result}"
          username = random_string.db_username.result
          backup_retention_days = local.database_config.backup_retention
          multi_az_enabled = local.database_config.multi_az
          tags = local.common_tags
        }
        connection = {
          host = "localhost"
          port = 5432
          ssl_mode = "require"
        }
        created_at = timestamp()
      })
      filename = "/tmp/database-config-${random_string.db_suffix.result}.json"
    }
    
    # Create database initialization script
    resource "local_file" "init_script" {
      content = <<-EOT
        -- Database initialization script
        -- Generated at: ${timestamp()}
        
        CREATE DATABASE IF NOT EXISTS ${local.database_config.name}_${random_string.db_suffix.result};
        
        CREATE USER IF NOT EXISTS '${random_string.db_username.result}'@'localhost' 
        IDENTIFIED BY '${random_password.db_password.result}';
        
        GRANT ALL PRIVILEGES ON ${local.database_config.name}_${random_string.db_suffix.result}.* 
        TO '${random_string.db_username.result}'@'localhost';
        
        FLUSH PRIVILEGES;
      EOT
      filename = "/tmp/init-db-${random_string.db_suffix.result}.sql"
    }
    
    # Simulate successful database deployment
    resource "null_resource" "database_deployment" {
      provisioner "local-exec" {
        command = "echo 'Database ${local.database_config.name}_${random_string.db_suffix.result} configured successfully'"
      }
      
      depends_on = [
        local_file.database_config,
        local_file.init_script
      ]
    }
    
    # Outputs
    output "database_name" {
      value = "${local.database_config.name}_${random_string.db_suffix.result}"
      description = "Generated database name"
    }
    
    output "database_username" {
      value = random_string.db_username.result
      description = "Database username"
      sensitive = false
    }
    
    output "backup_retention_days" {
      value = local.database_config.backup_retention
      description = "Backup retention period in days"
    }
    
    output "environment" {
      value = var.environment
      description = "Deployment environment"
    }
    
    output "deployment_status" {
      value = "SUCCESS"
      description = "Database deployment status"
    }
  
  writeConnectionSecretsToNamespace: crossplane-system
